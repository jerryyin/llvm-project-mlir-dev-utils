#! /bin/bash

## Usage
printUsage()
{
    echo "Later ..."
    echo "Usage: run.sh -r|-l|-o lowestIRFilename"
    echo "-r  : execute the generated IR by mlir-rocm-runner"
    echo "-l  : generate the lowest IR of the kernel wrapper function"
    echo "-o <lowestIRFilename>: lowest IR filename"
}

## mlir tools
BUILD_DIR=/home/zhanglx/llvm-project-mlir/build
BIN_DIR=${BUILD_DIR}/bin
MLIR_MIOPEN_DRIVER="${BIN_DIR}/mlir-miopen-driver -c"
MLIR_ROCM_RUNNER="${BIN_DIR}/mlir-rocm-runner --shared-libs=${BUILD_DIR}/external/llvm-project/llvm/lib/libmlir_rocm_runtime.so,${BUILD_DIR}/lib/libconv-validation-wrappers.so,${BUILD_DIR}/external/llvm-project/llvm/lib/libmlir_runner_utils.so --entry-point-result=void"
MIOPEN_GEN="${BIN_DIR}/miopen-gen"
MIOPEN_OPT="${BIN_DIR}/miopen-opt"

## lower the driver output to the lowest IR
## and extract the miopen_conv2d_xxx_0_gpu wrapper function
## $1: output IR generated by mlir-miopen-driver -c
## $2: if exist, output file name
print_lowestIR_wrapperFunc ()
{
    ## run miopen-opt
    ## all these passes are from mlir-rocm-runner
    ${MIOPEN_OPT} \
        -convert-scf-to-cf \
        -gpu-kernel-outlining \
        -pass-pipeline='gpu.module(strip-debuginfo,convert-gpu-to-rocdl,gpu-to-hsaco{chip=gfx908}),func.func(gpu-async-region,convert-math-to-llvm)' \
        -gpu-to-llvm \
        -async-to-async-runtime -convert-async-to-llvm \
        -convert-func-to-llvm \
        --llvm-software-bf16 \
        $1 &> tmp.mlir
    ## extract the kernel wrapper function
    sed -i '/llvm.func @miopen/,/}/!d;/}/q' tmp.mlir
    ## copy the result to specified filename
    ## or stdout if not specified
    if [[ $# -eq 2 ]];then
        mv tmp.mlir $2
    else
        cat tmp.mlir
    fi
    rm -f tmp.mlir
}

#############
## Configs ##
#############

## MLIR408
## The following config should fail on MI200 but passes
MIOPEN_GEN_CMD="--operation conv2d -t f16 --fil_layout kcyx --in_layout nchw --out_layout nkhw --batchsize 128 --in_channels 8 --in_h 8 --in_w 8 --out_channels 128 --fil_w 4 --fil_h 4 --dilation_h 1 --dilation_w 1 --conv_stride_h 1 --conv_stride_w 1 --padding_h 0 --padding_w 0 -p=false -x2"

## last config in fwd_i8
#MIOPEN_GEN_CMD="--operation conv2d -t i8 -x2 --fil_layout kcyx --in_layout nchw --out_layout nkhw --batchsize 256 --in_channels 64 --in_h 56 --in_w 56 --out_channels 64 --fil_h 3 --fil_w 3 --dilation_h 1 --dilation_w 1 --conv_stride_h 1 --conv_stride_w 1 --padding_h 1 --padding_w 1"

## the last config in resnet50 for convfp16_fwd
#MIOPEN_GEN_CMD="--operation conv2d -t f16 -x2 --fil_layout kcyx --in_layout nchw --out_layout nkhw --batchsize 256 --in_channels 64 --in_h 56 --in_w 56 --out_channels 64 --fil_h 3 --fil_w 3 --dilation_h 1 --dilation_w 1 --conv_stride_h 1 --conv_stride_w 1 --padding_h 1 --padding_w 1"

################################
## miopen-gen output filename ##
################################
MIOPEN_GEN_OUTPUT="miopen-gen_result_gpuKernel_cpuV_gpuOps.mlir"
#outputFilename="miopen-gen_result_gpuKernel_cpuV.mlir"

OPTIND=1

run=0
lowestIR=0
lowestIRFilename="wrapper_lowest.mlir"
while getopts "hrlo:" opt; do
    case "$opt" in
        h)
            printUsage
            exit 0
            ;;
        r)
            run=1
            ;;
        l)
            lowestIR=1
            ;;
        o)
            lowestIRFilename=$OPTARG
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

## -prc genCPUKernel
## -pv genCPUValidation
#./bin/miopen-gen -prc -pv ${miopen_gen_CMD} -o miopen-gen_result_cpuKernel_cpuV.mlir

## no -prc, i.e. do not generate cpu kernel
## i.e. generate gpu kernel
${MIOPEN_GEN} -pv ${MIOPEN_GEN_CMD} -o  ${MIOPEN_GEN_OUTPUT}

## go through the driver
${MLIR_MIOPEN_DRIVER} ${MIOPEN_GEN_OUTPUT} > driver_output.mlir

## go through mlir-opt
if [[ $lowestIR -eq 1 ]]; then
    print_lowestIR_wrapperFunc driver_output.mlir $lowestIRFilename
fi

if [[ $run -eq 1 ]]; then
    ${MLIR_ROCM_RUNNER} driver_output.mlir > tmp_result
    result=$(tail -1 tmp_result)
    echo "result: $result  (${MIOPEN_GEN_OUTPUT})"
    rm -f tmp_result
fi

exit

## batch testing miopen-gen against configs from resnet50
config="fwd_f16"
config_file="/home/zhanglx/llvm-project-mlir/build/miopen-gen_configs/miopen-gen_config_$config"
i=1
echo "testing with $config"
while IFS= read -r line
do
    ${MIOPEN_GEN} -pv ${line} | ${MLIR_MIOPEN_DRIVER_CMD} | ${MLIR_ROCM_RUNNER_CMD} > tmp_result
    result=$(tail -1 tmp_result)
    echo "$i: $result"
    ((i++))
done < "${config_file}"
